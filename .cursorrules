# Farm Management System - Project Guidelines

## AnythingLLM Integration Focus
- Develop a clear integration plan with AnythingLLM before making code changes
- Maintain compatibility with AnythingLLM's core functionality and architecture
- Extend rather than override AnythingLLM components where possible
- Follow AnythingLLM's existing patterns for vectorization, embedding, and retrieval
- Document all integration points with the base AnythingLLM system
- Test changes against the latest AnythingLLM version to ensure compatibility

## LibreChat Integration Requirements
- Maintain compatibility with both AnythingLLM and LibreChat architectures
- Document all LibreChat integration points and dependencies
- Follow LibreChat's patterns for chat functionality and message handling
- Implement proper error handling for LibreChat-specific features
- Ensure seamless user experience between AnythingLLM and LibreChat components
- Test against both systems' latest versions for compatibility
- Document any modifications needed in LibreChat for agricultural context

## Project Structure
- Maintain a clear folder structure with separate directories for backend, frontend, and documentation
- Use descriptive file names with a consistent naming convention
- Keep related functionality grouped together
- Number documentation files for easy reference (e.g., 01-System-Overview.md)
- Create dedicated directories for farm-specific extensions

## Asset Organization
- Store UI mockups and interface designs in assets/ui/mockups/
- Keep field-related images in assets/field-data/
- Maintain documentation images in assets/documentation/
- Reference materials stored in assets/reference/
- Equipment-related images in assets/field-data/equipment/

## Code Standards
- Follow separation of concerns principles in all implementations
- Store sensitive information like API keys in environment variables, not in code
- Maintain a requirements.txt with specific version numbers for reproducibility
- Follow standard API patterns for the libraries being used (e.g., OpenAI, FastAPI)
- For FastAPI apps, follow project-specific conventions for app structure
- Preserve existing functionality when making changes
- Follow AnythingLLM's existing patterns for state management and API design
- Implement consistent error handling across AnythingLLM and LibreChat integrations
- Use TypeScript for type safety in frontend components
- Follow both AnythingLLM and LibreChat coding conventions where applicable

## Component Library Standards
- Use Shadcn/UI as the primary component library for consistent UI/UX
- Extend Shadcn/UI components with agricultural-specific features when needed
- Maintain Shadcn/UI's accessibility standards across custom components
- Follow Shadcn/UI's theming system for consistent styling
- Implement responsive design using Shadcn/UI's built-in utilities
- Document any customizations made to Shadcn/UI components
- Use Shadcn/UI's form components for standardized data entry
- Leverage Shadcn/UI's layout components for consistent page structure
- Ensure proper integration with both AnythingLLM and LibreChat styling patterns

## Agricultural System Specifics
- Implement specialized data models for farm-specific information
- Create mobile-friendly interfaces for field use
- Optimize AI components for agricultural terminology and concepts
- Balance AI capabilities with appropriate UI components
- Focus on practical features that deliver immediate value to farmers
- Prioritize robust data capture methods for field conditions
- Ensure system works reliably in rural environments with limited connectivity

## Documentation
- Maintain clear, concise documentation for all components
- Update project checklist as items are completed
- Link checklist items to detailed documentation files
- Include implementation details in specialized documentation files
- Document API endpoints and data structures
- Create specific documentation for AnythingLLM integration points

## Development Process
- Start with an integration analysis to identify AnythingLLM and LibreChat touch points
- Create an integration plan before implementing any features
- Document dependencies and version requirements for both systems
- Implement features in the order specified in the project checklist
- Test each component thoroughly before moving to the next
- Ensure mobile compatibility for field-focused features
- Optimize for performance and offline capabilities where appropriate
- Maintain backward compatibility with existing AnythingLLM and LibreChat features
- Regularly test with both base systems during development
- Document any conflicts or compatibility issues between the systems

## Data Capture & Retrieval Excellence
- Optimize vectorization specifically for agricultural terminology and field observations
- Implement robust tagging systems that understand farm-specific entities (fields, crops, equipment)
- Enhance semantic search to recognize relationships between farming concepts
- Create specialized embedding approaches for different types of farm data (soil tests, field observations, equipment notes)
- Implement thorough validation for all captured data to ensure quality
- Design multi-modal capture methods (voice, image, text) optimized for field use
- Ensure retrieval systems provide context-aware results based on seasonal and operational factors
- Benchmark retrieval accuracy against real farm management scenarios

## Task Completion Protocol
- When a development task is completed, provide a brief, standardized green task completion summary
- Keep summaries concise and to the point - focus on key outcomes only
- Include: what was accomplished, critical challenges overcome, and essential next steps
- Limit to 3-8 check mark bullet points when possible
- Format consistently for easy scanning and reference
- Provide a copy-paste ready version for new chat contexts

when task is completed, besides the protocols, ask only the most important next step as a question!!

## Technical Discussion Protocol

- Before implementing any checklist item, conduct a focused technical discussion
- Document key decisions and their rationale in a standardized format
- For each component, address:
  * Integration approach with AnythingLLM
  * Technology selection and compatibility concerns
  * Data flow and state management
  * Mobile/field usability considerations
  * Testing approach and acceptance criteria
- Create a brief decision document for each major component
- Reference applicable agricultural use cases when making technical decisions
- Obtain sign-off from technical lead before beginning implementation
- Link discussion outcomes to relevant checklist items and documentation

## Testing Protocol
- Implement comprehensive testing for both AnythingLLM and LibreChat integrations
- Create test cases for agricultural-specific chat scenarios
- Test chat functionality in offline and limited connectivity scenarios
- Verify proper handling of multi-modal farm data inputs
- Ensure consistent behavior across both integration points
- Document test coverage for both systems
- Maintain separate test suites for system-specific features
- Regular integration testing between both systems